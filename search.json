[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Procesamiento de Lenguaje Natural",
    "section": "",
    "text": "Prefacio\nEl curso trata de ser auto-contenido, es decir, no debería de ser necesario leer otras fuentes para poder entenderlo y realizar las actividades. De cualquier manera es importante comentar que el curso está basado en los siguientes libros de texto:\n\nSpeech and Language Processing. An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition. Third Edition draft. Daniel Jurafsky and James H. Martin. pdf\nIntroduction to machine learning, Third Edition. Ethem Alpaydin. MIT Press.\nAn Introduction to Statistical Learning with Applications in R. Gareth James, Daniela Witten, Trevor Hastie, and Robert Tibshirani. Springer Texts in Statistics.\nAll of Statistics. A Concise Course in Statistical Inference. Larry Wasserman. MIT Press.\nAn Introduction to the Bootstrap. Bradley Efron and Robert J. Tibshirani. Monographs on Statistics and Applied Probability 57. Springer-Science+Business Media.\nUnderstanding Machine Learning: From Theory to Algorithms. Shai Shalev-Shwartz and Shai Ben-David. Cambridge University Press.\n\n\n\nNotación\nLa Tabla 1.1 muestra la notación que se seguirá en este documento.\n\n\nTabla 1.1: Notación\n\n\n\n\n\n\nSímbolo\nSignificado\n\n\n\n\n\\(x\\)\nVariable usada comunmente como entrada\n\n\n\\(y\\)\nVariable usada comunmente como salida\n\n\n\\(\\mathbb R\\)\nNúmeros reales\n\n\n\\(\\mathbf x\\)\nVector Columna \\(\\mathbf x \\in \\mathbb R^d\\)\n\n\n\\(d\\)\nDimensión\n\n\n\\(\\mathbf w \\cdot \\mathbf x\\)\nProducto punto donde \\(\\mathbf w\\) y \\(\\mathbf x \\in \\mathbb R^d\\)\n\n\n\\(\\mathcal D\\)\nConjunto de datos\n\n\n\\(\\mathcal T\\)\nConjunto de entrenamiento\n\n\n\\(\\mathcal V\\)\nConjunto de validación\n\n\n\\(\\mathcal G\\)\nConjunto de prueba\n\n\n\\(N\\)\nNúmero de ejemplos\n\n\n\\(K\\)\nNúmero de clases\n\n\n\\(\\mathbb P(\\cdot)\\)\nProbabilidad\n\n\n\\(\\mathcal X, \\mathcal Y\\)\nVariables aleatorías\n\n\n\\(\\mathcal N(\\mu, \\sigma^2)\\)\nDistribución Normal con parámetros \\(\\mu\\) y \\(\\sigma^2\\)\n\n\n\\(f_{\\mathcal X}\\)\nFunción de densidad de probabilidad de \\(\\mathcal X\\)\n\n\n\\(\\mathbb 1(e)\\)\nFunción para indicar; \\(1\\) only if \\(e\\) is true\n\n\n\\(\\Omega\\)\nEspacio de búsqueda\n\n\n\\(\\mathbb V\\)\nVarianza\n\n\n\\(\\mathbb E\\)\nEsperanza"
  },
  {
    "objectID": "capitulos/01Introduccion.html",
    "href": "capitulos/01Introduccion.html",
    "title": "1  Introducción",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#paquetes-usados",
    "href": "capitulos/02ManejandoTexto.html#paquetes-usados",
    "title": "2  Manejando Texto",
    "section": "Paquetes usados",
    "text": "Paquetes usados\n\nfrom microtc.params import OPTION_GROUP, OPTION_DELETE, OPTION_NONE\nfrom microtc.textmodel import SKIP_SYMBOLS\nfrom b4msa.textmodel import TextModel\nfrom b4msa.lang_dependency import LangDependency\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud as WC\nfrom matplotlib import pylab as plt\nimport numpy as np\nimport unicodedata\nimport re\n\n\nVideo explicando la unidad"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#normalización-de-texto",
    "href": "capitulos/02ManejandoTexto.html#normalización-de-texto",
    "title": "2  Manejando Texto",
    "section": "2.1 Normalización de Texto",
    "text": "2.1 Normalización de Texto\nIn all the topics covered, the assumption is that the text is well-formatted and spaces nicely surround the words (tokens). However, this is not the general case, and the spelling errors and the procedure used to define the tokens strongly impact the algorithm’s performance. Consequently, this part of the course is devoted to presenting standard techniques used to normalize the text and to transform the text into tokens.\nThe text normalization described are mainly the ones used in the following research words:\n\nAn automated text categorization framework based on hyperparameter optimization (Tellez et al. (2018))\nA simple approach to multilingual polarity classification in Twitter (Tellez, Miranda-Jiménez, Graff, Moctezuma, Suárez, et al. (2017))\nA case study of Spanish text transformations for twitter sentiment analysis (Tellez, Miranda-Jiménez, Graff, Moctezuma, Siordia, et al. (2017))"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#entity",
    "href": "capitulos/02ManejandoTexto.html#entity",
    "title": "2  Manejando Texto",
    "section": "2.2 Entity",
    "text": "2.2 Entity\nThe journey of text normalization starts with handling different entities within a text; the entities could be the mentioned of a user in a tweet, the numbers, or the URL, to mention a few. The actions performed to the entities found are to delete them or replace them for a particular token.\n\n2.2.1 Users\nThe first process is to deal with username following the format of Twitter. In a tweet, the mention of a user is identified with a string starting with the character @. The two actions could be to delete all the users’ mentions or change them for a common label.\nThe procedure uses regular expressions to find the entities; for example, the following code can remove the users’ mentions.\n\ntext = 'Hi @xx, @mm is talking about you.'\nre.sub(r\"@\\S+\", \"\", text)\n\n'Hi   is talking about you.'\n\n\nOn the other hand, to replace the username with a shared label can be implemented with the following code, where the label is _usr\n\ntext = 'Hi @xx, @mm is talking about you.'\nre.sub(r\"@\\S+\", \"_usr\", text)\n\n'Hi _usr _usr is talking about you.'\n\n\n\n\n2.2.2 URL\nThe previous code can be adapted to handle URL; one only needs to define the regular expression to use; see the following code that removes all the appearances of the URL.\n\ntext = \"go http://google.com, and find out\"\nre.sub(r\"https?://\\S+\", \"\", text)\n\n'go  and find out'\n\n\n\n\n2.2.3 Numbers\nThe previous code can be modified to deal with numbers and replace the number found with a shared label such as _num.\n\ntext = \"we have won 10 M\"\nre.sub(r\"\\d\\d*\\.?\\d*|\\d*\\.\\d\\d*\", \"_num\", text)\n\n'we have won _num M'"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#spelling",
    "href": "capitulos/02ManejandoTexto.html#spelling",
    "title": "2  Manejando Texto",
    "section": "2.3 Spelling",
    "text": "2.3 Spelling\nThe next block of text normalization modifies the writing of the text, removing components that, for particular applications, can be ignored to reduce the vocabulary size, which impacts the complexity of the algorithm and could be reflected in an improvement in the performance.\n\n2.3.1 Case sensitive\nThe first of these transformations is the conversion to lower case; transforming all the words to the lower case has the consequence that the vocabulary is reduced, e.g., the word Mexico and mexico would be considered the same token. This operation can be implemented with function lower as follows.\n\ntext = \"Mexico\"\ntext.lower()\n\n'mexico'\n\n\n\n\n2.3.2 Punctuation\nThe punctuation symbols are essential to natural language understanding and generation; however, for other applications, such as sentiment analysis or text categorization, its contribution is opaque by the increase in the vocabulary size. Consequently, its removal influences the vocabulary size, which sometimes has a positive result on the performance.\nThese symbols can be removed by traversing the string and skipping the punctuations.\n\ntext = \"Hi! good morning,\"\noutput = \"\"\nfor x in text:\n    if x in SKIP_SYMBOLS:\n        continue\n    output += x\noutput\n\n'Hi good morning'\n\n\n\n\n2.3.3 Diacritic\nDifferent languages use diacritic symbols, e.g., México; as expected, this has the consequence of increasing the vocabulary. On the other hand, in informal writing, the misuse of diacritic symbols is common; one particular way to handle this problem is to remove the diacritic symbols and treat them as the same word, e.g., México would be replaced by Mexico.\n\ntext = 'México'\noutput = \"\"\nfor x in unicodedata.normalize('NFD', text):\n    o = ord(x)\n    if 0x300 &lt;= o and o &lt;= 0x036F:\n        continue\n    output += x\noutput\n\n'Mexico'"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#semantic-normalizations",
    "href": "capitulos/02ManejandoTexto.html#semantic-normalizations",
    "title": "2  Manejando Texto",
    "section": "2.4 Semantic Normalizations",
    "text": "2.4 Semantic Normalizations\nThe next set of normalization techniques aims to reduce the vocabulary size using the meaning of the words to modify them or remove them from the text.\n\n2.4.1 Stop words\nThe stop words are the most frequent words used in the language. These words are essential to communicate but are not so much on tasks where the aim is to discriminate texts according to their meaning.\nThe stop words can be stored in a dictionary, and then the process of removing them consists of traversing all the tokens from a text and then removing those in the dictionary. The process is exemplified with the following code.\n\nlang = LangDependency('english')\n\ntext = 'Good morning! Today, we have a warm weather.'\noutput = []\nfor word in text.split():\n    if word.lower() in lang.stopwords[len(word)]:\n        continue\n    output.append(word)\noutput = \" \".join(output) \noutput\n\n'Good morning! Today, warm weather.'\n\n\n\n\n2.4.2 Stemmming and Lemmatization\nThe idea of stemming and lemmatization, seen as a normalization process, is to group different words based on their root; for example, the process would associate words like playing, player, plays with the token play.\nStemming treats the problem with fewer constraints than lemmatization, having as a consequence that the common word found cannot be the common root of the words; additionally, the algorithms do not consider the role of the word being processed in the sentence. On the other hand, a lemmatization algorithm obtains the root of the word considering the part of the speech of the processed word.\n\nstemmer = PorterStemmer()\n\ntext = 'I like playing football'\noutput = []\nfor word in text.split():\n    w = stemmer.stem(word)\n    output.append(w)\noutput = \" \".join(output) \noutput\n\n'i like play footbal'"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#tokenization",
    "href": "capitulos/02ManejandoTexto.html#tokenization",
    "title": "2  Manejando Texto",
    "section": "2.5 Tokenization",
    "text": "2.5 Tokenization\nOnce the text has been normalized, it is time to transform it into its fundamental elements, which could be words, bigrams, n-grams, substrings, or a combination of them; this process is known as tokenization. Different methods can be applied to tokenize a text, the one used is so far is to transform a text into a list of words where the word is surrounded by space or non-printable characters. The decision of which tokenizer to use depends on the application; for example, in order to generate text, it is crucial to learn the punctuation symbols, so these symbols are tokens. On the other hand, in the text categorization problem, where the task is to classify a text, it might be irrelevant to keep the order of the words.\n\n2.5.1 n-grams\nThe first tokenizer review corresponds to transforming the text into words, bigrams, and in general, n-grams. The case of words is straightforward using the function split; once the words have been obtained, these can be combined to form an n-gram of any size, as shown below.\n\ntext = 'I like playing football on Saturday'\nwords = text.split()\nn = 3\nn_grams = []\nfor a in zip(*[words[i:] for i in range(n)]):\n    n_grams.append(\"~\".join(a))\nn_grams\n\n['I~like~playing',\n 'like~playing~football',\n 'playing~football~on',\n 'football~on~Saturday']\n\n\n\n\n2.5.2 q-grams\nThe q-gram tokenizer complements the n-grams one; it is defined as the substring of length \\(q\\). The q-grams have two relevant features; the first one is that they are language agnostic consequently can be applied to any language, and the second is that they tackle the misspelling problem from an approximate matching perspective.\nThe code is equivalent to the one used to compute n-grams, being the difference that the iteration is on characters instead of words.\n\ntext = 'I like playing'\nq = 4\nq_grams = []\nfor a in zip(*[text[i:] for i in range(q)]):\n    q_grams.append(\"\".join(a))\nq_grams\n\n['I li',\n ' lik',\n 'like',\n 'ike ',\n 'ke p',\n 'e pl',\n ' pla',\n 'play',\n 'layi',\n 'ayin',\n 'ying']"
  },
  {
    "objectID": "capitulos/02ManejandoTexto.html#textmodel",
    "href": "capitulos/02ManejandoTexto.html#textmodel",
    "title": "2  Manejando Texto",
    "section": "2.6 TextModel",
    "text": "2.6 TextModel\nThe class TextModel of the library B4MSA contains the text normalization and tokenizers described and can be used as follows.\nThe first step is to instantiate the class given the desired parameters. The Entity parameters have three options to delete (OPTION_DELETE) the entity, replace (OPTION_GROUP) it with a predefined token, or do not apply that operation (OPTION_NONE). These parameters are:\n\nusr_option\nurl_option\nnum_option\n\nThe class has three additional transformation which are:\n\nemo_option\nhashtag_option\nent_option\n\nThe Spelling transformations can be triggered with the following keywords:\n\nlc\ndel_punc\ndel_diac\n\nwhich corresponds to lower case, punctuation, and diacritic.\nThe Semantic normalizations are set up with the parameters:\n\nstopwords\nstemming\n\nFinally, the tokenizer is configured with the token_list parameter, which has the following format; negative numbers indicate \\(n\\)-grams and positive numbers \\(q\\)-grams.\nFor example, the following code invokes the text normalization algorithm; the only difference is that spaces are replaced with ~.\n\ntext = 'I like playing football with @mgraffg'\ntm = TextModel(token_list=[-1, 3], lang='english', \n               usr_option=OPTION_GROUP,\n               stemming=True)\ntm.text_transformations(text)\n\n'~i~like~play~fotbal~with~_usr~'\n\n\nOn the other hand, the tokenizer is used as follows.\n\ntext = 'I like playing football with @mgraffg'\ntm = TextModel(token_list=[-1, 5], lang='english', \n               usr_option=OPTION_GROUP,\n               stemming=True)\ntm.tokenize(text)\n\n['i',\n 'like',\n 'play',\n 'fotbal',\n 'with',\n '_usr',\n 'q:~i~li',\n 'q:i~lik',\n 'q:~like',\n 'q:like~',\n 'q:ike~p',\n 'q:ke~pl',\n 'q:e~pla',\n 'q:~play',\n 'q:play~',\n 'q:lay~f',\n 'q:ay~fo',\n 'q:y~fot',\n 'q:~fotb',\n 'q:fotba',\n 'q:otbal',\n 'q:tbal~',\n 'q:bal~w',\n 'q:al~wi',\n 'q:l~wit',\n 'q:~with',\n 'q:with~',\n 'q:ith~_',\n 'q:th~_u',\n 'q:h~_us',\n 'q:~_usr',\n 'q:_usr~']\n\n\nIt can be observed that all \\(q\\)-grams start with the prefix q:.\n\n\n\n\n\n\nTellez, Eric S., Sabino Miranda-Jiménez, Mario Graff, Daniela Moctezuma, Oscar S. Siordia, y Elio A. Villaseñor. 2017. «A case study of Spanish text transformations for twitter sentiment analysis». Expert Systems with Applications 81: 457-71. https://doi.org/https://doi.org/10.1016/j.eswa.2017.03.071.\n\n\nTellez, Eric S., Sabino Miranda-Jiménez, Mario Graff, Daniela Moctezuma, Ranyart R. Suárez, y Oscar S. Siordia. 2017. «A Simple Approach to Multilingual Polarity Classification in Twitter». Pattern Recognition Letters. https://doi.org/10.1016/j.patrec.2017.05.024.\n\n\nTellez, Eric S., Daniela Moctezuma, Sabino Miranda-Jiménez, y Mario Graff. 2018. «An automated text categorization framework based on hyperparameter optimization». Knowledge-Based Systems 149: 110-23. https://doi.org/10.1016/j.knosys.2018.03.003."
  },
  {
    "objectID": "capitulos/03ModeladoLenguaje.html",
    "href": "capitulos/03ModeladoLenguaje.html",
    "title": "3  Modelado de Lenguaje",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/04ClasificacionTexto.html",
    "href": "capitulos/04ClasificacionTexto.html",
    "title": "4  Clasificación de Texto",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/05RepresentacionTexto.html",
    "href": "capitulos/05RepresentacionTexto.html",
    "title": "5  Representación de Texto",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/06MezclaModelos.html",
    "href": "capitulos/06MezclaModelos.html",
    "title": "6  Mezcla de Modelos",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/07TareasClasificacion.html",
    "href": "capitulos/07TareasClasificacion.html",
    "title": "7  Tareas de Clasificación de Texto",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/08BasesConocimiento.html",
    "href": "capitulos/08BasesConocimiento.html",
    "title": "8  Bases de Conocimiento",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/09Visualizacion.html",
    "href": "capitulos/09Visualizacion.html",
    "title": "9  Visualización",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/10Conclusiones.html",
    "href": "capitulos/10Conclusiones.html",
    "title": "10  Conclusiones",
    "section": "",
    "text": "El objetivo de la unidad es"
  },
  {
    "objectID": "capitulos/11Referencias.html",
    "href": "capitulos/11Referencias.html",
    "title": "Referencias",
    "section": "",
    "text": "Tellez, Eric S., Sabino Miranda-Jiménez, Mario Graff, Daniela Moctezuma,\nOscar S. Siordia, and Elio A. Villaseñor. 2017. “A Case Study of\nSpanish Text Transformations for Twitter Sentiment Analysis.”\nExpert Systems with Applications 81: 457–71. https://doi.org/https://doi.org/10.1016/j.eswa.2017.03.071.\n\n\nTellez, Eric S., Sabino Miranda-Jiménez, Mario Graff, Daniela Moctezuma,\nRanyart R. Suárez, and Oscar S. Siordia. 2017. “A\nSimple Approach to Multilingual\nPolarity Classification in\nTwitter.” Pattern Recognition Letters. https://doi.org/10.1016/j.patrec.2017.05.024.\n\n\nTellez, Eric S., Daniela Moctezuma, Sabino Miranda-Jiménez, and Mario\nGraff. 2018. “An Automated Text Categorization Framework Based on\nHyperparameter Optimization.” Knowledge-Based Systems\n149: 110–23. https://doi.org/10.1016/j.knosys.2018.03.003."
  }
]