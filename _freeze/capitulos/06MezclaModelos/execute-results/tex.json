{
  "hash": "68ca518fec659fdf23a3874292318eb9",
  "result": {
    "markdown": "# Mezcla de Modelos\n\nEl **objetivo** de la unidad es \n\n## Paquetes usados {.unnumbered}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom EvoMSA import BoW, DenseBoW, StackGeneralization\nfrom microtc.utils import tweet_iterator\nfrom IngeoML import CI, SelectFromModelCV\nfrom sklearn.metrics import f1_score,\\\n                            recall_score,\\\n                            precision_score\nfrom wordcloud import WordCloud                            \nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pylab as plt\nimport seaborn as sns\n```\n:::\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n---\n\n**Video explicando la unidad**\n\n---\n\n:::\n\n## Conjunto de Datos \n\nEl conjunto de datos se puede conseguir en la página de [Delitos](https://ingeotec.github.io/Delitos) aunque en esta dirección es necesario poblar los textos dado que solamente se encuentra el identificador del Tweet.\n\nPara leer los datos del conjunto de entrenamiento y prueba se utilizan las siguientes instrucciones. En la variable `D` se tiene los datos que se utilizarán para entrenar el clasificador basado en la bolsa de palabras y en `Dtest` los datos del conjunto de prueba, que son usados para medir el rendimiento del clasificador.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfname = 'delitos/delitos_ingeotec_Es_train.json'\nfname_test = 'delitos/delitos_ingeotec_Es_test.json'\nD = list(tweet_iterator(fname))\nDtest = list(tweet_iterator(fname_test))\n```\n:::\n\n\nEn la siguiente instrucción se observa el primer elemento del conjunto de entrenamiento. Se puede observar que en el campo `text` se encuentra el texto, el campo `klass` representa la etiqueta o clase, donde $0$ representa la clase negativa y $1$ la clase positiva, es decir, la presencia de un delito. El campo `id` es el identificador del Tweet y `annotations` son las clases dadas por los etiquetadores a ese ejemplo.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nD[81]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n{'annotations': [0, 0, 0],\n 'id': 1107040319986696195,\n 'klass': 0,\n 'text': 'To loco'}\n```\n:::\n:::\n\n\n## Bolsa de Palabras Dispersa \n\nSe inicia con la creación de un clasificador basado en una bolsa de palabras dispersa, el clasificador es una máquina de soporte vectorial lineal (`LinearSVC`). La siguiente instrucción usa la clase `BoW` para crear este clasificador de texto. El primer paso es seleccionar el lenguaje, en este caso español (es) y después se entrena usando el método `fit`.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nbow = BoW(lang='es').fit(D)\n```\n:::\n\n\nHabiendo entrenado el clasificador de texto es momento de utilizarlo para predecir, las siguientes dos instrucciones muestra el uso de la instancia `bow` para predecir clase del texto *me golpearon y robaron la bicicleta en la noche.* Se puede observar que la clase es $1$, lo cual indica que el texto describe la presencia de un delito.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntxt = 'me golpearon y robaron la bicicleta en la noche'\nbow.predict([txt])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([1])\n```\n:::\n:::\n\n\nSe observa que el método `predict` recibe una lista de textos a predecir, en la siguiente instrucción se predicen todas las clases del conjunto de prueba (`Dtest`), la predicciones se guardar en la variable `hy_bow`.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nhy_bow = bow.predict(Dtest)\n```\n:::\n\n\n```python\n#| echo: false\n\n```\n\nHabiendo realizado la predicciones en el conjunto de prueba ($\\mathcal D$), es momento de utilizar estas para medir el rendimiento, en esta ocasión se mide el valor $f_1$ para cada clase. \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ny = np.r_[[x['klass'] for x in Dtest]]\nf1_score(y, hy_bow, average=None)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([0.94612795, 0.74603175])\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nci = CI(statistic=lambda y, hy: f1_score(y, hy, \n                                         average=None))\nci_izq, ci_der = ci(y, hy_bow)\n```\n:::\n\n\n\n\nEl intervalo izquierdo es $[0.9276, 0.6471]$ y el derecho tiene los valores $[0.9654, 0.8333]$.\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![Histograma de f1 por clase](06MezclaModelos_files/figure-pdf/hist-f1-bow-output-1.pdf){#hist-f1-bow}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nws = bow.estimator_instance.coef_[0]\nidfs = bow.weights\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntokens_pos = {name: w * idf\n              for name, idf, w in zip(bow.names,\n                                      idfs, ws)\n              if w > 0}\ntokens_neg = {name: w * idf * -1\n              for name, idf, w in zip(bow.names,\n                                      idfs, ws)\n              if w < 0}\n```\n:::\n\n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-display}\n![Nubes de tokens positivos y negativos](06MezclaModelos_files/figure-pdf/fig-nube-tokens-output-1.pdf){#fig-nube-tokens}\n:::\n:::\n\n\n## Bolsa de Palabras Densas \n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndense = DenseBoW(lang='es',\n                 voc_size_exponent=15,\n                 dataset=False)\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmacro_f1 = lambda y, hy: f1_score(y, hy, average='macro')\nkwargs = dense.estimator_kwargs\nestimator = dense.estimator_class(**kwargs)\nkwargs = dict(estimator=estimator,\n              scoring=macro_f1)\ndense.select(D=D,\n             feature_selection=SelectFromModelCV,\n             feature_selection_kwargs=kwargs)\ndense.fit(D)\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nselect = dense.feature_selection\nperf = select.cv_results_\n```\n:::\n\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![Rendimiento Variando el Número de Características](06MezclaModelos_files/figure-pdf/fig-dense-k-output-1.pdf){#fig-dense-k}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nhy_dense = dense.predict(Dtest)\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nf1_score(y, hy_dense, average=None)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([0.94158076, 0.75362319])\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n\n::: {.cell-output .cell-output-display}\n![Histogramas de f1 por clase](06MezclaModelos_files/figure-pdf/hist-f1-bow-dense-output-1.pdf){#hist-f1-bow-dense}\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nw = dense.estimator_instance.coef_[0]\nnames = np.array(dense.names)\ncarac_pos = {k: v for k, v in zip(names, w) if v > 0}\ncarac_neg = {k: v * -1 for k, v in zip(names, w) if v < 0}\n```\n:::\n\n\n::: {.cell execution_count=24}\n\n::: {.cell-output .cell-output-display}\n![Nube de características positivas y negativas](06MezclaModelos_files/figure-pdf/fig-nube-densa-output-1.pdf){#fig-nube-densa}\n:::\n:::\n\n\n## Análisis Mediante Ejemplos \n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\narray([[0.03104452]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([[0.00906055]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray([[-0.03643003]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\narray([[-0.03598119]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\narray([[0.03104452]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n[('asesinan', 0.21959420995311213),\n ('asesinan~a', 0.20828288389513877),\n ('q:sina', 0.1451180162718085),\n ('q:n~a~', 0.08388027652620572),\n ('q:an~a', 0.07344376137922538)]\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([[0.00906055]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n[('ocurrir', 0.06683457750173856),\n ('muere', 0.053880044741064774),\n ('consiguio', -0.05168798790090579),\n ('critican', -0.04459207389659752),\n ('hubieses', -0.04426955144485894)]\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n\n::: {.cell-output .cell-output-display}\n![Nube de características ejemplo positivo](06MezclaModelos_files/figure-pdf/fig-nube-ej-pos-output-1.pdf){#fig-nube-ej-pos}\n:::\n:::\n\n\n::: {.cell execution_count=34}\n\n::: {.cell-output .cell-output-display}\n![Nube de características ejemplo negativo](06MezclaModelos_files/figure-pdf/fig-nube-ej-output-1.pdf){#fig-nube-ej}\n:::\n:::\n\n\n::: {.cell execution_count=35}\n\n::: {.cell-output .cell-output-display}\n![Nube de características en un ejemplo positivo con predicción negativa](06MezclaModelos_files/figure-pdf/fig-nube-ej-error-output-1.pdf){#fig-nube-ej-error}\n:::\n:::\n\n\n## Combinando Modelos\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nstack = StackGeneralization([bow, dense]).fit(D)\n```\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nhy_stack = stack.predict(Dtest)\n```\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nf1_score(y, hy_stack, average=None)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\narray([0.94791667, 0.79166667])\n```\n:::\n:::\n\n\n::: {#tbl-performance-recall-precision-delitos .cell tbl-cap='Rendimiento' execution_count=39}\n\n::: {.cell-output .cell-output-display execution_count=39}\n|              |   Recall neg | Recall pos | Precision neg | Precision pos |\n|--------------|--------------|------------|---------------|---------------|\n|`bow`|$0.9894$ | $0.6184$ | $0.9065$ | $0.9400$|\n|`dense`|$0.9648$ | $0.6842$ | $0.9195$ | $0.8387$|\n|`stack`|$0.9613$ | $0.7500$ | $0.9349$ | $0.8382$|\n:::\n:::\n\n\n::: {#tbl-performance-f1-delitos .cell tbl-cap='Rendimiento' execution_count=40}\n\n::: {.cell-output .cell-output-display execution_count=40}\n|              | f1 neg | f1 pos | macro-f1 |\n|--------------|--------|--------|----------|\n|`bow`|$0.9461$ | $0.7460$ | $0.8461$|\n|`dense`|$0.9416$ | $0.7536$ | $0.8476$|\n|`stack`|$0.9479$ | $0.7917$ | $0.8698$|\n:::\n:::\n\n\n",
    "supporting": [
      "06MezclaModelos_files/figure-pdf"
    ],
    "filters": []
  }
}