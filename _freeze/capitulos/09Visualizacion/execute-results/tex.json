{
  "hash": "81d4c1c4078facf75558a298d85a2cd8",
  "result": {
    "markdown": "# Visualización\n\nEl **objetivo** de la unidad es \n\n## Paquetes usados {.unnumbered}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom EvoMSA import DenseBoW\nfrom microtc.utils import tweet_iterator\nfrom IngeoML import SelectFromModelCV\nfrom sklearn.metrics import recall_score\nfrom wordcloud import WordCloud                   \nimport numpy as np\nimport pandas as pd\nimport umap\nimport textwrap\nfrom matplotlib import pylab as plt\nimport seaborn as sns\nimport plotly.express as px\n```\n:::\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n---\n\n**Video explicando la unidad**\n\n---\n\n:::\n\n## Introducción \n\n\nEl conjunto de datos se puede conseguir en la página de [Delitos](https://ingeotec.github.io/Delitos) aunque en esta dirección es necesario poblar los textos dado que solamente se encuentra el identificador del Tweet.\n\nPara leer los datos del conjunto de entrenamiento y prueba se utilizan las siguientes instrucciones. En la variable `D` se tiene los datos que se utilizarán para entrenar el clasificador basado en la bolsa de palabras y en `Dtest` los datos del conjunto de prueba, que son usados para medir el rendimiento del clasificador.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfname = 'delitos/delitos_ingeotec_Es_train.json'\nfname_test = 'delitos/delitos_ingeotec_Es_test.json'\nD = list(tweet_iterator(fname))\nDtest = list(tweet_iterator(fname_test))\n```\n:::\n\n\n## Representación \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndense = DenseBoW(lang='es', dataset=False,\n                 emoji=True, keyword=True,\n                 voc_size_exponent=15,\n                 estimator_kwargs=dict(dual='auto'))\n```\n:::\n\n\n\n\n## Proyección con UMAP \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nreducer = umap.UMAP(n_neighbors=5)\nlow_dim = reducer.fit_transform(X_dense)\n```\n:::\n\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![](09Visualizacion_files/figure-pdf/cell-9-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndense.fit(D)\nX_dense = dense.transform(Dtest)\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf_dis = dense.decision_function(Dtest).flatten()\n```\n:::\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display}\n![](09Visualizacion_files/figure-pdf/cell-14-output-1.pdf){}\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "09Visualizacion_files/figure-pdf"
    ],
    "filters": []
  }
}